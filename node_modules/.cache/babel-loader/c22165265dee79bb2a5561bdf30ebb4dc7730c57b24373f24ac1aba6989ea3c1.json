{"ast":null,"code":"var _jsxFileName = \"/Users/viditshrivastava/Desktop/HVI quiz app/React-QuizApp/src/components/App.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useReducer } from \"react\";\n\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Loader from \"./Loader\";\n// import Error from \"./Error\";\n// import StartScreen from \"./StartScreen\";\n// import Question from \"./Question\";\n// import NextButton from \"./NextButton\";\n// import Progress from \"./Progress\";\n// import FinishScreen from \"./FinishScreen\";\n// import Footer from \"./Footer\";\n// import Timer from \"./Timer\";\n// import \"../index.css\";\n\n// const SECS_PER_QUESTION = 5;\n\n// // We need to define the intialState in order to use useReduce Hook.\n// const initialState = {\n//   questions: [],\n//   // 'loading', 'error', 'ready', 'active', 'finished'\n//   status: \"loading\",\n//   index: 0,\n//   answer: null,\n//   points: 0,\n//   highscore: 0,\n//   secondsRemaining: null,\n// };\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"dataReceived\":\n//       return {\n//         ...state,\n//         questions: action.payload,\n//         status: \"ready\",\n//       };\n//     case \"dataFailed\":\n//       return {\n//         ...state,\n//         status: \"error\",\n//       };\n//     case \"start\":\n//       return {\n//         ...state,\n//         status: \"active\",\n//         secondsRemaining: state.questions.length * SECS_PER_QUESTION,\n//       };\n//     case \"newAnswer\":\n//       const question = state.questions.at(state.index);\n\n//       return {\n//         ...state,\n//         answer: action.payload,\n//         points:\n//           action.payload === question.correctOption\n//             ? state.points + question.points\n//             : state.points,\n//       };\n//     case \"nextQuestion\":\n//       return { ...state, index: state.index + 1, answer: null };\n//     case \"finish\":\n//       return {\n//         ...state,\n//         status: \"finished\",\n//         highscore:\n//           state.points > state.highscore ? state.points : state.highscore,\n//       };\n//     case \"restart\":\n//       return { ...initialState, questions: state.questions, status: \"ready\" };\n\n//     case \"tick\":\n//       return {\n//         ...state,\n//         secondsRemaining: state.secondsRemaining - 1,\n//         highscore:\n//           state.secondsRemaining === 0\n//             ? state.points > state.highscore\n//               ? state.points\n//               : state.highscore\n//             : state.highscore,\n//         status: state.secondsRemaining === 0 ? \"finished\" : state.status,\n//       };\n\n//     default:\n//       throw new Error(\"Action unkonwn\");\n//   }\n// }\n\n// export default function App() {\n//   const [\n//     { questions, status, index, answer, points, highscore, secondsRemaining },\n//     dispatch,\n//   ] = useReducer(reducer, initialState);\n\n//   const numQuestions = questions.length;\n//   const maxPossiblePoints = questions.reduce(\n//     (prev, cur) => prev + cur.points,\n//     0\n//   );\n\n//   useEffect(function () {\n//     fetch(\"https://vidit-shrivastava-ox.github.io/quiz_questions/questions.json\")\n//       .then((res) => res.json())\n//       .then((data) =>\n//         dispatch({\n//           type: \"dataReceived\",\n//           payload: data[\"questions\"],\n//         })\n//       )\n//       .catch((err) => dispatch({ type: \"dataFailed\" }));\n//   }, []);\n\n//   return (\n//     <div className=\"wrapper\">\n//       <div className=\"app\">\n//         <div className=\"headerWrapper\">\n//           <Header />\n\n//           <Main>\n//             {status === \"loading\" && <Loader />}\n//             {status === \"error\" && <Error />}\n//             {status === \"ready\" && (\n//               <StartScreen numQuestions={numQuestions} dispatch={dispatch} />\n//             )}{\" \"}\n//             {status === \"active\" && (\n//               <>\n//                 <Progress\n//                   index={index}\n//                   numQuestions={numQuestions}\n//                   points={points}\n//                   maxPossiblePoints={maxPossiblePoints}\n//                   answer={answer}\n//                 />\n//                 <Question\n//                   question={questions[index]}\n//                   dispatch={dispatch}\n//                   answer={answer}\n//                 />\n//                 <Footer>\n//                   <Timer\n//                     dispatch={dispatch}\n//                     secondsRemaining={secondsRemaining}\n//                   />\n//                   <NextButton\n//                     dispatch={dispatch}\n//                     answer={answer}\n//                     numQuestions={numQuestions}\n//                     index={index}\n//                   />\n//                 </Footer>\n//               </>\n//             )}\n//             {status === \"finished\" && (\n//               <FinishScreen\n//                 points={points}\n//                 maxPossiblePoints={maxPossiblePoints}\n//                 highscore={highscore}\n//                 dispatch={dispatch}\n//               />\n//             )}\n//           </Main>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport { useEffect, useReducer } from \"react\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Loader from \"./Loader\";\nimport Error from \"./Error\";\nimport StartScreen from \"./StartScreen\";\nimport Question from \"./Question\";\nimport NextButton from \"./NextButton\";\nimport Progress from \"./Progress\";\nimport FinishScreen from \"./FinishScreen\";\nimport Footer from \"./Footer\";\nimport Timer from \"./Timer\";\nimport \"../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SECS_PER_QUESTION = 60;\nconst initialState = {\n  questions: [],\n  status: \"loading\",\n  // 'loading', 'error', 'ready', 'active', 'finished'\n  index: 0,\n  answer: null,\n  points: 0,\n  highscore: 0,\n  secondsRemaining: null,\n  showFunFact: false // Track if the fun fact should be displayed\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"dataReceived\":\n      return {\n        ...state,\n        questions: action.payload,\n        status: \"ready\"\n      };\n    case \"dataFailed\":\n      return {\n        ...state,\n        status: \"error\"\n      };\n    case \"start\":\n      return {\n        ...state,\n        status: \"active\",\n        secondsRemaining: state.questions.length * SECS_PER_QUESTION\n      };\n    case \"newAnswer\":\n      const question = state.questions.at(state.index);\n      return {\n        ...state,\n        answer: action.payload,\n        points: action.payload === question.correctOption ? state.points + question.points : state.points,\n        showFunFact: true // Show the fun fact after selecting any answer\n      };\n\n    case \"nextQuestion\":\n      return {\n        ...state,\n        index: state.index + 1,\n        answer: null,\n        showFunFact: false // Reset fun fact when moving to the next question\n      };\n\n    case \"finish\":\n      return {\n        ...state,\n        status: \"finished\",\n        highscore: state.points > state.highscore ? state.points : state.highscore\n      };\n    case \"restart\":\n      return {\n        ...initialState,\n        questions: state.questions,\n        status: \"ready\"\n      };\n    case \"tick\":\n      return {\n        ...state,\n        secondsRemaining: state.secondsRemaining - 1,\n        highscore: state.secondsRemaining === 0 ? state.points > state.highscore ? state.points : state.highscore : state.highscore,\n        status: state.secondsRemaining === 0 ? \"finished\" : state.status\n      };\n    default:\n      throw new Error(\"Action unknown\");\n  }\n}\nexport default function App() {\n  _s();\n  const [{\n    questions,\n    status,\n    index,\n    answer,\n    points,\n    highscore,\n    secondsRemaining,\n    showFunFact\n  }, dispatch] = useReducer(reducer, initialState);\n  const numQuestions = questions.length;\n  const maxPossiblePoints = questions.reduce((prev, cur) => prev + cur.points, 0);\n  useEffect(() => {\n    fetch(\"https://vidit-shrivastava-ox.github.io/quiz_questions/questions.json\").then(res => res.json()).then(data => dispatch({\n      type: \"dataReceived\",\n      payload: data[\"questions\"]\n    })).catch(() => dispatch({\n      type: \"dataFailed\"\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"headerWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Main, {\n          children: [status === \"loading\" && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 38\n          }, this), status === \"error\" && /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 36\n          }, this), status === \"ready\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n            numQuestions: numQuestions,\n            dispatch: dispatch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this), status === \"active\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Progress, {\n              index: index,\n              numQuestions: numQuestions,\n              points: points,\n              maxPossiblePoints: maxPossiblePoints,\n              answer: answer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Question, {\n              question: questions[index],\n              dispatch: dispatch,\n              answer: answer,\n              showFunFact: showFunFact\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Footer, {\n              children: [/*#__PURE__*/_jsxDEV(Timer, {\n                dispatch: dispatch,\n                secondsRemaining: secondsRemaining\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n                dispatch: dispatch,\n                answer: answer,\n                numQuestions: numQuestions,\n                index: index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), status === \"finished\" && /*#__PURE__*/_jsxDEV(FinishScreen, {\n            points: points,\n            maxPossiblePoints: maxPossiblePoints,\n            highscore: highscore,\n            dispatch: dispatch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mB6CftUobAhhxsEfWh+LBwH/KPQ=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useReducer","Header","Main","Loader","Error","StartScreen","Question","NextButton","Progress","FinishScreen","Footer","Timer","jsxDEV","_jsxDEV","Fragment","_Fragment","SECS_PER_QUESTION","initialState","questions","status","index","answer","points","highscore","secondsRemaining","showFunFact","reducer","state","action","type","payload","length","question","at","correctOption","App","_s","dispatch","numQuestions","maxPossiblePoints","reduce","prev","cur","fetch","then","res","json","data","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/viditshrivastava/Desktop/HVI quiz app/React-QuizApp/src/components/App.js"],"sourcesContent":["// import { useEffect, useReducer } from \"react\";\n\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Loader from \"./Loader\";\n// import Error from \"./Error\";\n// import StartScreen from \"./StartScreen\";\n// import Question from \"./Question\";\n// import NextButton from \"./NextButton\";\n// import Progress from \"./Progress\";\n// import FinishScreen from \"./FinishScreen\";\n// import Footer from \"./Footer\";\n// import Timer from \"./Timer\";\n// import \"../index.css\";\n\n// const SECS_PER_QUESTION = 5;\n\n// // We need to define the intialState in order to use useReduce Hook.\n// const initialState = {\n//   questions: [],\n//   // 'loading', 'error', 'ready', 'active', 'finished'\n//   status: \"loading\",\n//   index: 0,\n//   answer: null,\n//   points: 0,\n//   highscore: 0,\n//   secondsRemaining: null,\n// };\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"dataReceived\":\n//       return {\n//         ...state,\n//         questions: action.payload,\n//         status: \"ready\",\n//       };\n//     case \"dataFailed\":\n//       return {\n//         ...state,\n//         status: \"error\",\n//       };\n//     case \"start\":\n//       return {\n//         ...state,\n//         status: \"active\",\n//         secondsRemaining: state.questions.length * SECS_PER_QUESTION,\n//       };\n//     case \"newAnswer\":\n//       const question = state.questions.at(state.index);\n\n//       return {\n//         ...state,\n//         answer: action.payload,\n//         points:\n//           action.payload === question.correctOption\n//             ? state.points + question.points\n//             : state.points,\n//       };\n//     case \"nextQuestion\":\n//       return { ...state, index: state.index + 1, answer: null };\n//     case \"finish\":\n//       return {\n//         ...state,\n//         status: \"finished\",\n//         highscore:\n//           state.points > state.highscore ? state.points : state.highscore,\n//       };\n//     case \"restart\":\n//       return { ...initialState, questions: state.questions, status: \"ready\" };\n\n//     case \"tick\":\n//       return {\n//         ...state,\n//         secondsRemaining: state.secondsRemaining - 1,\n//         highscore:\n//           state.secondsRemaining === 0\n//             ? state.points > state.highscore\n//               ? state.points\n//               : state.highscore\n//             : state.highscore,\n//         status: state.secondsRemaining === 0 ? \"finished\" : state.status,\n//       };\n\n//     default:\n//       throw new Error(\"Action unkonwn\");\n//   }\n// }\n\n// export default function App() {\n//   const [\n//     { questions, status, index, answer, points, highscore, secondsRemaining },\n//     dispatch,\n//   ] = useReducer(reducer, initialState);\n\n//   const numQuestions = questions.length;\n//   const maxPossiblePoints = questions.reduce(\n//     (prev, cur) => prev + cur.points,\n//     0\n//   );\n\n//   useEffect(function () {\n//     fetch(\"https://vidit-shrivastava-ox.github.io/quiz_questions/questions.json\")\n//       .then((res) => res.json())\n//       .then((data) =>\n//         dispatch({\n//           type: \"dataReceived\",\n//           payload: data[\"questions\"],\n//         })\n//       )\n//       .catch((err) => dispatch({ type: \"dataFailed\" }));\n//   }, []);\n\n//   return (\n//     <div className=\"wrapper\">\n//       <div className=\"app\">\n//         <div className=\"headerWrapper\">\n//           <Header />\n\n//           <Main>\n//             {status === \"loading\" && <Loader />}\n//             {status === \"error\" && <Error />}\n//             {status === \"ready\" && (\n//               <StartScreen numQuestions={numQuestions} dispatch={dispatch} />\n//             )}{\" \"}\n//             {status === \"active\" && (\n//               <>\n//                 <Progress\n//                   index={index}\n//                   numQuestions={numQuestions}\n//                   points={points}\n//                   maxPossiblePoints={maxPossiblePoints}\n//                   answer={answer}\n//                 />\n//                 <Question\n//                   question={questions[index]}\n//                   dispatch={dispatch}\n//                   answer={answer}\n//                 />\n//                 <Footer>\n//                   <Timer\n//                     dispatch={dispatch}\n//                     secondsRemaining={secondsRemaining}\n//                   />\n//                   <NextButton\n//                     dispatch={dispatch}\n//                     answer={answer}\n//                     numQuestions={numQuestions}\n//                     index={index}\n//                   />\n//                 </Footer>\n//               </>\n//             )}\n//             {status === \"finished\" && (\n//               <FinishScreen\n//                 points={points}\n//                 maxPossiblePoints={maxPossiblePoints}\n//                 highscore={highscore}\n//                 dispatch={dispatch}\n//               />\n//             )}\n//           </Main>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\nimport { useEffect, useReducer } from \"react\";\n\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Loader from \"./Loader\";\nimport Error from \"./Error\";\nimport StartScreen from \"./StartScreen\";\nimport Question from \"./Question\";\nimport NextButton from \"./NextButton\";\nimport Progress from \"./Progress\";\nimport FinishScreen from \"./FinishScreen\";\nimport Footer from \"./Footer\";\nimport Timer from \"./Timer\";\nimport \"../index.css\";\n\nconst SECS_PER_QUESTION = 60;\n\nconst initialState = {\n  questions: [],\n  status: \"loading\", // 'loading', 'error', 'ready', 'active', 'finished'\n  index: 0,\n  answer: null,\n  points: 0,\n  highscore: 0,\n  secondsRemaining: null,\n  showFunFact: false, // Track if the fun fact should be displayed\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"dataReceived\":\n      return {\n        ...state,\n        questions: action.payload,\n        status: \"ready\",\n      };\n    case \"dataFailed\":\n      return {\n        ...state,\n        status: \"error\",\n      };\n    case \"start\":\n      return {\n        ...state,\n        status: \"active\",\n        secondsRemaining: state.questions.length * SECS_PER_QUESTION,\n      };\n    case \"newAnswer\":\n      const question = state.questions.at(state.index);\n\n      return {\n        ...state,\n        answer: action.payload,\n        points:\n          action.payload === question.correctOption\n            ? state.points + question.points\n            : state.points,\n        showFunFact: true, // Show the fun fact after selecting any answer\n      };\n    case \"nextQuestion\":\n      return {\n        ...state,\n        index: state.index + 1,\n        answer: null,\n        showFunFact: false, // Reset fun fact when moving to the next question\n      };\n    case \"finish\":\n      return {\n        ...state,\n        status: \"finished\",\n        highscore:\n          state.points > state.highscore ? state.points : state.highscore,\n      };\n    case \"restart\":\n      return { ...initialState, questions: state.questions, status: \"ready\" };\n    case \"tick\":\n      return {\n        ...state,\n        secondsRemaining: state.secondsRemaining - 1,\n        highscore:\n          state.secondsRemaining === 0\n            ? state.points > state.highscore\n              ? state.points\n              : state.highscore\n            : state.highscore,\n        status: state.secondsRemaining === 0 ? \"finished\" : state.status,\n      };\n    default:\n      throw new Error(\"Action unknown\");\n  }\n}\n\nexport default function App() {\n  const [\n    { questions, status, index, answer, points, highscore, secondsRemaining, showFunFact },\n    dispatch,\n  ] = useReducer(reducer, initialState);\n\n  const numQuestions = questions.length;\n  const maxPossiblePoints = questions.reduce(\n    (prev, cur) => prev + cur.points,\n    0\n  );\n\n  useEffect(() => {\n    fetch(\"https://vidit-shrivastava-ox.github.io/quiz_questions/questions.json\")\n      .then((res) => res.json())\n      .then((data) =>\n        dispatch({\n          type: \"dataReceived\",\n          payload: data[\"questions\"],\n        })\n      )\n      .catch(() => dispatch({ type: \"dataFailed\" }));\n  }, []);\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"app\">\n        <div className=\"headerWrapper\">\n          <Header />\n\n          <Main>\n            {status === \"loading\" && <Loader />}\n            {status === \"error\" && <Error />}\n            {status === \"ready\" && (\n              <StartScreen numQuestions={numQuestions} dispatch={dispatch} />\n            )}\n            {status === \"active\" && (\n              <>\n                <Progress\n                  index={index}\n                  numQuestions={numQuestions}\n                  points={points}\n                  maxPossiblePoints={maxPossiblePoints}\n                  answer={answer}\n                />\n                <Question\n                  question={questions[index]}\n                  dispatch={dispatch}\n                  answer={answer}\n                  showFunFact={showFunFact}\n                />\n                <Footer>\n                  <Timer\n                    dispatch={dispatch}\n                    secondsRemaining={secondsRemaining}\n                  />\n                  <NextButton\n                    dispatch={dispatch}\n                    answer={answer}\n                    numQuestions={numQuestions}\n                    index={index}\n                  />\n                </Footer>\n              </>\n            )}\n            {status === \"finished\" && (\n              <FinishScreen\n                points={points}\n                maxPossiblePoints={maxPossiblePoints}\n                highscore={highscore}\n                dispatch={dispatch}\n              />\n            )}\n          </Main>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\n\n\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAE7C,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEt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"},"metadata":{},"sourceType":"module","externalDependencies":[]}