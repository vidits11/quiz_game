{"ast":null,"code":"var _jsxFileName = \"/Users/viditshrivastava/Desktop/HVI quiz app/React-QuizApp/src/components/App.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useReducer } from \"react\";\n\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Loader from \"./Loader\";\n// import Error from \"./Error\";\n// import StartScreen from \"./StartScreen\";\n// import Question from \"./Question\";\n// import NextButton from \"./NextButton\";\n// import Progress from \"./Progress\";\n// import FinishScreen from \"./FinishScreen\";\n// import Footer from \"./Footer\";\n// import Timer from \"./Timer\";\n// import \"../index.css\";\n\n// const SECS_PER_QUESTION = 60;\n\n// const initialState = {\n//   questions: [],\n//   status: \"loading\", // 'loading', 'error', 'ready', 'active', 'finished'\n//   index: 0,\n//   answer: null,\n//   points: 0,\n//   highscore: 0,\n//   secondsRemaining: null,\n//   showFunFact: false, // Track if the fun fact should be displayed\n// };\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"dataReceived\":\n//       return {\n//         ...state,\n//         questions: action.payload,\n//         status: \"ready\",\n//       };\n//     case \"dataFailed\":\n//       return {\n//         ...state,\n//         status: \"error\",\n//       };\n//     case \"start\":\n//       return {\n//         ...state,\n//         status: \"active\",\n//         secondsRemaining: state.questions.length * SECS_PER_QUESTION,\n//       };\n//     case \"newAnswer\":\n//       const question = state.questions.at(state.index);\n\n//       return {\n//         ...state,\n//         answer: action.payload,\n//         points:\n//           action.payload === question.correctOption\n//             ? state.points + question.points\n//             : state.points,\n//         showFunFact: true, // Show the fun fact after selecting any answer\n//       };\n//     case \"nextQuestion\":\n//       return {\n//         ...state,\n//         index: state.index + 1,\n//         answer: null,\n//         showFunFact: false, // Reset fun fact when moving to the next question\n//       };\n//     case \"finish\":\n//       return {\n//         ...state,\n//         status: \"finished\",\n//         highscore:\n//           state.points > state.highscore ? state.points : state.highscore,\n//       };\n//     case \"restart\":\n//       return { ...initialState, questions: state.questions, status: \"ready\" };\n//     case \"tick\":\n//       return {\n//         ...state,\n//         secondsRemaining: state.secondsRemaining - 1,\n//         highscore:\n//           state.secondsRemaining === 0\n//             ? state.points > state.highscore\n//               ? state.points\n//               : state.highscore\n//             : state.highscore,\n//         status: state.secondsRemaining === 0 ? \"finished\" : state.status,\n//       };\n//     default:\n//       throw new Error(\"Action unknown\");\n//   }\n// }\n\n// export default function App() {\n//   const [\n//     { questions, status, index, answer, points, highscore, secondsRemaining, showFunFact },\n//     dispatch,\n//   ] = useReducer(reducer, initialState);\n\n//   const numQuestions = questions.length;\n//   const maxPossiblePoints = questions.reduce(\n//     (prev, cur) => prev + cur.points,\n//     0\n//   );\n\n//   useEffect(() => {\n//     fetch(\"https://vidit-shrivastava-ox.github.io/quiz_questions/questions.json\")\n//       .then((res) => res.json())\n//       .then((data) =>\n//         dispatch({\n//           type: \"dataReceived\",\n//           payload: data[\"questions\"],\n//         })\n//       )\n//       .catch(() => dispatch({ type: \"dataFailed\" }));\n//   }, []);\n\n//   return (\n//     <div className=\"wrapper\">\n//       <div className=\"app\">\n//         <div className=\"headerWrapper\">\n//           <Header />\n\n//           <Main>\n//             {status === \"loading\" && <Loader />}\n//             {status === \"error\" && <Error />}\n//             {status === \"ready\" && (\n//               <StartScreen numQuestions={numQuestions} dispatch={dispatch} />\n//             )}\n//             {status === \"active\" && (\n//               <>\n//                 <Progress\n//                   index={index}\n//                   numQuestions={numQuestions}\n//                   points={points}\n//                   maxPossiblePoints={maxPossiblePoints}\n//                   answer={answer}\n//                 />\n//                 <Question\n//                   question={questions[index]}\n//                   dispatch={dispatch}\n//                   answer={answer}\n//                   showFunFact={showFunFact}\n//                 />\n//                 <Footer>\n//                   <Timer\n//                     dispatch={dispatch}\n//                     secondsRemaining={secondsRemaining}\n//                   />\n//                   <NextButton\n//                     dispatch={dispatch}\n//                     answer={answer}\n//                     numQuestions={numQuestions}\n//                     index={index}\n//                   />\n//                 </Footer>\n//               </>\n//             )}\n//             {status === \"finished\" && (\n//               <FinishScreen\n//                 points={points}\n//                 maxPossiblePoints={maxPossiblePoints}\n//                 highscore={highscore}\n//                 dispatch={dispatch}\n//               />\n//             )}\n//           </Main>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport { useReducer, useState } from \"react\";\nimport Question from \"./Question\";\nimport questions from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentQuestionIndex: 0,\n  answer: null\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"answer\":\n      return {\n        ...state,\n        answer: action.payload\n      };\n    case \"nextQuestion\":\n      return {\n        ...state,\n        currentQuestionIndex: state.currentQuestionIndex + 1,\n        answer: null\n      };\n    default:\n      return state;\n  }\n}\nfunction App() {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [showFunFact, setShowFunFact] = useState(false);\n  const currentQuestion = questions[state.currentQuestionIndex];\n  function handleAnswer(option) {\n    dispatch({\n      type: \"answer\",\n      payload: option\n    });\n    setShowFunFact(true); // Show the fun fact when an answer is selected\n  }\n\n  function handleNextQuestion() {\n    dispatch({\n      type: \"nextQuestion\"\n    });\n    setShowFunFact(false); // Reset fun fact visibility for the next question\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quiz App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), currentQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: currentQuestion,\n        dispatch: dispatch,\n        answer: state.answer,\n        showFunFact: showFunFact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), state.answer && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleNextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You've completed the quiz!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thanks for playing!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"noOIuHuy2pxPQ68w4fC4DM4hzVc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useReducer","useState","Question","questions","jsxDEV","_jsxDEV","initialState","currentQuestionIndex","answer","reducer","state","action","type","payload","App","_s","dispatch","showFunFact","setShowFunFact","currentQuestion","handleAnswer","option","handleNextQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","onClick","_c","$RefreshReg$"],"sources":["/Users/viditshrivastava/Desktop/HVI quiz app/React-QuizApp/src/components/App.js"],"sourcesContent":["// import { useEffect, useReducer } from \"react\";\n\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Loader from \"./Loader\";\n// import Error from \"./Error\";\n// import StartScreen from \"./StartScreen\";\n// import Question from \"./Question\";\n// import NextButton from \"./NextButton\";\n// import Progress from \"./Progress\";\n// import FinishScreen from \"./FinishScreen\";\n// import Footer from \"./Footer\";\n// import Timer from \"./Timer\";\n// import \"../index.css\";\n\n// const SECS_PER_QUESTION = 60;\n\n// const initialState = {\n//   questions: [],\n//   status: \"loading\", // 'loading', 'error', 'ready', 'active', 'finished'\n//   index: 0,\n//   answer: null,\n//   points: 0,\n//   highscore: 0,\n//   secondsRemaining: null,\n//   showFunFact: false, // Track if the fun fact should be displayed\n// };\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"dataReceived\":\n//       return {\n//         ...state,\n//         questions: action.payload,\n//         status: \"ready\",\n//       };\n//     case \"dataFailed\":\n//       return {\n//         ...state,\n//         status: \"error\",\n//       };\n//     case \"start\":\n//       return {\n//         ...state,\n//         status: \"active\",\n//         secondsRemaining: state.questions.length * SECS_PER_QUESTION,\n//       };\n//     case \"newAnswer\":\n//       const question = state.questions.at(state.index);\n\n//       return {\n//         ...state,\n//         answer: action.payload,\n//         points:\n//           action.payload === question.correctOption\n//             ? state.points + question.points\n//             : state.points,\n//         showFunFact: true, // Show the fun fact after selecting any answer\n//       };\n//     case \"nextQuestion\":\n//       return {\n//         ...state,\n//         index: state.index + 1,\n//         answer: null,\n//         showFunFact: false, // Reset fun fact when moving to the next question\n//       };\n//     case \"finish\":\n//       return {\n//         ...state,\n//         status: \"finished\",\n//         highscore:\n//           state.points > state.highscore ? state.points : state.highscore,\n//       };\n//     case \"restart\":\n//       return { ...initialState, questions: state.questions, status: \"ready\" };\n//     case \"tick\":\n//       return {\n//         ...state,\n//         secondsRemaining: state.secondsRemaining - 1,\n//         highscore:\n//           state.secondsRemaining === 0\n//             ? state.points > state.highscore\n//               ? state.points\n//               : state.highscore\n//             : state.highscore,\n//         status: state.secondsRemaining === 0 ? \"finished\" : state.status,\n//       };\n//     default:\n//       throw new Error(\"Action unknown\");\n//   }\n// }\n\n// export default function App() {\n//   const [\n//     { questions, status, index, answer, points, highscore, secondsRemaining, showFunFact },\n//     dispatch,\n//   ] = useReducer(reducer, initialState);\n\n//   const numQuestions = questions.length;\n//   const maxPossiblePoints = questions.reduce(\n//     (prev, cur) => prev + cur.points,\n//     0\n//   );\n\n//   useEffect(() => {\n//     fetch(\"https://vidit-shrivastava-ox.github.io/quiz_questions/questions.json\")\n//       .then((res) => res.json())\n//       .then((data) =>\n//         dispatch({\n//           type: \"dataReceived\",\n//           payload: data[\"questions\"],\n//         })\n//       )\n//       .catch(() => dispatch({ type: \"dataFailed\" }));\n//   }, []);\n\n//   return (\n//     <div className=\"wrapper\">\n//       <div className=\"app\">\n//         <div className=\"headerWrapper\">\n//           <Header />\n\n//           <Main>\n//             {status === \"loading\" && <Loader />}\n//             {status === \"error\" && <Error />}\n//             {status === \"ready\" && (\n//               <StartScreen numQuestions={numQuestions} dispatch={dispatch} />\n//             )}\n//             {status === \"active\" && (\n//               <>\n//                 <Progress\n//                   index={index}\n//                   numQuestions={numQuestions}\n//                   points={points}\n//                   maxPossiblePoints={maxPossiblePoints}\n//                   answer={answer}\n//                 />\n//                 <Question\n//                   question={questions[index]}\n//                   dispatch={dispatch}\n//                   answer={answer}\n//                   showFunFact={showFunFact}\n//                 />\n//                 <Footer>\n//                   <Timer\n//                     dispatch={dispatch}\n//                     secondsRemaining={secondsRemaining}\n//                   />\n//                   <NextButton\n//                     dispatch={dispatch}\n//                     answer={answer}\n//                     numQuestions={numQuestions}\n//                     index={index}\n//                   />\n//                 </Footer>\n//               </>\n//             )}\n//             {status === \"finished\" && (\n//               <FinishScreen\n//                 points={points}\n//                 maxPossiblePoints={maxPossiblePoints}\n//                 highscore={highscore}\n//                 dispatch={dispatch}\n//               />\n//             )}\n//           </Main>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\nimport { useReducer, useState } from \"react\";\nimport Question from \"./Question\";\nimport questions from \"./data\";\n\nconst initialState = {\n  currentQuestionIndex: 0,\n  answer: null,\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"answer\":\n      return {\n        ...state,\n        answer: action.payload,\n      };\n    case \"nextQuestion\":\n      return {\n        ...state,\n        currentQuestionIndex: state.currentQuestionIndex + 1,\n        answer: null,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [showFunFact, setShowFunFact] = useState(false);\n\n  const currentQuestion = questions[state.currentQuestionIndex];\n\n  function handleAnswer(option) {\n    dispatch({ type: \"answer\", payload: option });\n    setShowFunFact(true); // Show the fun fact when an answer is selected\n  }\n\n  function handleNextQuestion() {\n    dispatch({ type: \"nextQuestion\" });\n    setShowFunFact(false); // Reset fun fact visibility for the next question\n  }\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Quiz App</h1>\n      </header>\n      {currentQuestion ? (\n        <div className=\"main\">\n          <Question\n            question={currentQuestion}\n            dispatch={dispatch}\n            answer={state.answer}\n            showFunFact={showFunFact}\n          />\n          {state.answer && (\n            <button className=\"btn\" onClick={handleNextQuestion}>\n              Next Question\n            </button>\n          )}\n        </div>\n      ) : (\n        <div className=\"result_container\">\n          <h2>You've completed the quiz!</h2>\n          <p>Thanks for playing!</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,SAAS,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,YAAY,GAAG;EACnBC,oBAAoB,EAAE,CAAC;EACvBC,MAAM,EAAE;AACV,CAAC;AAED,SAASC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC9B,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,QAAQ;MACX,OAAO;QACL,GAAGF,KAAK;QACRF,MAAM,EAAEG,MAAM,CAACE;MACjB,CAAC;IACH,KAAK,cAAc;MACjB,OAAO;QACL,GAAGH,KAAK;QACRH,oBAAoB,EAAEG,KAAK,CAACH,oBAAoB,GAAG,CAAC;QACpDC,MAAM,EAAE;MACV,CAAC;IACH;MACE,OAAOE,KAAK;EAChB;AACF;AAEA,SAASI,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGhB,UAAU,CAACS,OAAO,EAAEH,YAAY,CAAC;EAC3D,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMkB,eAAe,GAAGhB,SAAS,CAACO,KAAK,CAACH,oBAAoB,CAAC;EAE7D,SAASa,YAAYA,CAACC,MAAM,EAAE;IAC5BL,QAAQ,CAAC;MAAEJ,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAEQ;IAAO,CAAC,CAAC;IAC7CH,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EACxB;;EAEA,SAASI,kBAAkBA,CAAA,EAAG;IAC5BN,QAAQ,CAAC;MAAEJ,IAAI,EAAE;IAAe,CAAC,CAAC;IAClCM,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;EACzB;;EAEA,oBACEb,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBnB,OAAA;MAAAmB,QAAA,eACEnB,OAAA;QAAAmB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC,EACRT,eAAe,gBACdd,OAAA;MAAKkB,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBnB,OAAA,CAACH,QAAQ;QACP2B,QAAQ,EAAEV,eAAgB;QAC1BH,QAAQ,EAAEA,QAAS;QACnBR,MAAM,EAAEE,KAAK,CAACF,MAAO;QACrBS,WAAW,EAAEA;MAAY;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,EACDlB,KAAK,CAACF,MAAM,iBACXH,OAAA;QAAQkB,SAAS,EAAC,KAAK;QAACO,OAAO,EAAER,kBAAmB;QAAAE,QAAA,EAAC;MAErD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,gBAENvB,OAAA;MAAKkB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BnB,OAAA;QAAAmB,QAAA,EAAI;MAA0B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCvB,OAAA;QAAAmB,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACb,EAAA,CA3CQD,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}